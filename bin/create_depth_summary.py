#!/usr/bin/env python

"""
Generate a CSV file containing a summary of the depth information.

Get this from the per base coverage file generated by sambamba

Usage:

python create_depth_summary --input $sambamba_depth_summary --output $output_name $thresholds

For example:

python create_depth_summary --input test_13M12598_depth_of_coverage.csv.gz --output test_13M12598.depth_summary 20 250
"""

import argparse
import csv

import pandas as pd

def above_threshold(df, threshold):
	"""
	Returns True if depth above or equal to  threshold
	"""
	
	depth = df['depth']
	
	if depth >= threshold:
		
		return True
	
	return False

if __name__ == '__main__':

	parser = argparse.ArgumentParser(description='Calculate summary from per base depth file.')

	parser.add_argument('depth_thresholds', metavar='N', type=int, nargs='+',
						help='Coverage cutoffs')
	parser.add_argument('--input_file', type=str, nargs=1, required=True,
					help='The per base coverage file')
	parser.add_argument('--output_file', type=str, nargs=1, required=True,
					help='Where to store and name the output file.')

	args = parser.parse_args()

	input_file = args.input_file[0]
	output_file = args.output_file[0]
	depth_thresholds = args.depth_thresholds

	# read file
	df = pd.read_csv(input_file, sep='\t', names =['chr', 'pos', 'depth', 'base1'], dtype={'chr': str})

	# get summary as dict
	data_dict = df[['depth']].describe().to_dict()['depth']


	# add extra columns for each depth_thresholds
	for threshold in depth_thresholds:
		
		df[f'pct_greater_{threshold}x'] = df.apply(above_threshold, axis=1, args=(threshold,))

	# calculate percentage of bases over each threshold
	threshold_dict = {}

	for threshold in depth_thresholds:
		
		pct_grtx = df[df[f'pct_greater_{threshold}x']==True].shape[0] / df.shape[0]
		
		threshold_dict[f'pct_greater_{threshold}x'] = pct_grtx


	# write output
	with open(output_file, 'w') as csvfile:
		spamwriter = csv.writer(csvfile, delimiter=',')
		spamwriter.writerow(['mean_depth', round(data_dict['mean'],2)])
		spamwriter.writerow(['min_depth', round(data_dict['min'],2)])
		spamwriter.writerow(['max_depth', round(data_dict['max'],2)])
		spamwriter.writerow(['stddev_depth', round(data_dict['std'],2)])
		
		for threshold in threshold_dict:
			
			spamwriter.writerow([threshold, round(threshold_dict[threshold],2)])